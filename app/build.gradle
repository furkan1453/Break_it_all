import com.android.build.OutputFile
apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    defaultConfig {
        applicationId "com.example.simonppg.break_it_all"
        minSdkVersion 18
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    splits {
        abi {
            enable true
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk false
        }
    }
    buildTypes {
        /*release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }*/
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.4.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
}

task appStart(type: Exec, dependsOn: 'installDebug') {
    // linux
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.example.simonppg.break_it_all/.MainScreen'

    // windows
    // commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', 'com.example.simonppg.break_it_all/.MainScreen'
}

task conanInstall {
    def CONAN_ARCHS_MAP = ['arm64-v8a':'armv8', 'armeabi-v7a':'armv7', 'x86':'x86', 'x86_64':'x86_64']
    def api_level = android.defaultConfig.minSdkVersion.mApiLevel
    android {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                println output
                println output.apkData.filters
                println output.apkData.filters[0]
                println output.getFilter(OutputFile.ABI)

                def arch = CONAN_ARCHS_MAP.get(output.getFilter(OutputFile.ABI), it)
                println arch
                def build_dir = new File("app/conan/${output.getFilter(OutputFile.ABI)}")
                build_dir.mkdirs()
                def cmd = "conan install ../../src/main/cpp/conanfile.txt " +
                        "--profile ../../android_24_arm_clang " +
                        "-s arch=${arch} -s os=Android -s os.api_level=${api_level} -s build_type=Debug" +
                        " --build missing "
                print("\n\n>> ${cmd} \n\n")
                def sout = new StringBuilder(), serr = new StringBuilder()
                def proc = cmd.execute(null, build_dir)
                proc.consumeProcessOutput(sout, serr)
                proc.waitFor()
                println "$sout $serr"
                if(proc.exitValue() != 0) {
                    throw new Exception("out> $sout err> $serr" + "\nCommand: ${cmd}")
                }
            }
        }
    }
}